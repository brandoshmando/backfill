// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package backfill

import (
	kafka "github.com/segmentio/kafka-go"
	mock "github.com/stretchr/testify/mock"
)

// mockClient is an autogenerated mock type for the client type
type mockClient struct {
	mock.Mock
}

// addrs provides a mock function with given fields:
func (_m *mockClient) addrs() ([]string, error) {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fetchLatestOffsets provides a mock function with given fields: topic, partitions
func (_m *mockClient) fetchLatestOffsets(topic string, partitions []kafka.Partition) (map[int]int64, error) {
	ret := _m.Called(topic, partitions)

	var r0 map[int]int64
	if rf, ok := ret.Get(0).(func(string, []kafka.Partition) map[int]int64); ok {
		r0 = rf(topic, partitions)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int]int64)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []kafka.Partition) error); ok {
		r1 = rf(topic, partitions)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// fetchPartitions provides a mock function with given fields: topic
func (_m *mockClient) fetchPartitions(topic string) ([]kafka.Partition, error) {
	ret := _m.Called(topic)

	var r0 []kafka.Partition
	if rf, ok := ret.Get(0).(func(string) []kafka.Partition); ok {
		r0 = rf(topic)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.Partition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(topic)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
